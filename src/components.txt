File: visualization-components.js
import React, { useEffect, useRef, startTransition } from 'react';
import { Box } from '@mui/material';
import { Canvas, useFrame, useThree } from '@react-three/fiber';
import PropTypes from 'prop-types';
import { Text } from '@react-three/drei';
import * as THREE from 'three';

// Store colors for variables
const variableColorMap = new Map();

// Generate a random color for a variable
const getVariableColor = (varName) => {
  if (variableColorMap.has(varName)) {
    return variableColorMap.get(varName);
  }

  // Generate a new color using HSL for better distribution
  const hue = Math.random();
  const saturation = 0.7 + Math.random() * 0.3; // 0.7-1.0
  const lightness = 0.4 + Math.random() * 0.2;  // 0.4-0.6

  // Convert HSL to RGB
  const h = hue;
  const s = saturation;
  const l = lightness;
  
  const hue2rgb = (p, q, t) => {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1/6) return p + (q - p) * 6 * t;
    if (t < 1/2) return q;
    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
    return p;
  };

  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p = 2 * l - q;
  
  const color = {
    r: Math.round(hue2rgb(p, q, h + 1/3) * 255),
    g: Math.round(hue2rgb(p, q, h) * 255),
    b: Math.round(hue2rgb(p, q, h - 1/3) * 255)
  };

  variableColorMap.set(varName, color);
  return color;
};

// Utility function to fetch block data
const fetchAndLogBlockData = async (gridX, gridY, gridZ) => {
  console.log('Fetching data for block:', gridX, gridY, gridZ);
  try {
    const response = await fetch('http://73.106.153.51:5002/process_blocks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        x: gridX,
        y: gridY,
        z: gridZ,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();  // Await the JSON response
    console.log('Received data:', data); // Log the data
    return data;
  } catch (error) {
    console.error('Error fetching block data:', error);
    throw error;
  }
};


// TensorMesh Component


const CustomCameraControls = ({ onCameraReady }) => {
  const { camera, gl } = useThree();
  const cameraRotation = useRef(new THREE.Euler(0, 0, 0, 'YXZ'));
  const initialPosition = useRef(camera.position.clone());

  useEffect(() => {
    if (onCameraReady) {
      onCameraReady({
        focusOnPosition: (position) => {
          // Reset rotation
          cameraRotation.current.set(0, 0, 0, 'YXZ');
          camera.setRotationFromEuler(cameraRotation.current);
          
          // Move camera to focus position
          camera.position.set(
            position[0],
            position[1] + 20,
            position[2] + 100
          );
          camera.lookAt(position[0], position[1], position[2]);
          camera.updateProjectionMatrix();
        },
        resetView: () => {
          camera.position.copy(initialPosition.current);
          cameraRotation.current.set(0, 0, 0, 'YXZ');
          camera.setRotationFromEuler(cameraRotation.current);
          camera.updateProjectionMatrix();
        }
      });
    }

    const canvas = gl.domElement;
    if (!canvas) return;

    const handleKeyDown = (event) => {
      const PAN_SPEED = 1;
      const ZOOM_SPEED = 2;
      const ROTATE_SPEED = 0.05;

      switch (event.key) {
        case 'ArrowUp':
          cameraRotation.current.x -= ROTATE_SPEED;
          cameraRotation.current.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, cameraRotation.current.x));
          camera.setRotationFromEuler(cameraRotation.current);
          break;
        case 'ArrowDown':
          cameraRotation.current.x += ROTATE_SPEED;
          cameraRotation.current.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, cameraRotation.current.x));
          camera.setRotationFromEuler(cameraRotation.current);
          break;
        case 'ArrowLeft':
          cameraRotation.current.y -= ROTATE_SPEED;
          camera.setRotationFromEuler(cameraRotation.current);
          break;
        case 'ArrowRight':
          cameraRotation.current.y += ROTATE_SPEED;
          camera.setRotationFromEuler(cameraRotation.current);
          break;
        case 'w':
        case 'W':
          camera.position.y += PAN_SPEED;
          break;
        case 's':
        case 'S':
          camera.position.y -= PAN_SPEED;
          break;
        case 'a':
        case 'A':
          camera.position.x -= PAN_SPEED;
          break;
        case 'd':
        case 'D':
          camera.position.x += PAN_SPEED;
          break;
        case 'o':
        case 'O':
          camera.position.z -= ZOOM_SPEED;
          break;
        case 'p':
        case 'P':
          camera.position.z += ZOOM_SPEED;
          break;
        default:
          break;
      }
      camera.updateProjectionMatrix();
    };

    const handleWheel = (event) => {
      const ZOOM_SPEED = 0.1;
      camera.position.z += event.deltaY * ZOOM_SPEED;
      camera.position.z = Math.max(20, Math.min(200, camera.position.z));
      camera.updateProjectionMatrix();
    };

    window.addEventListener('keydown', handleKeyDown);
    canvas.addEventListener('wheel', handleWheel);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      canvas.removeEventListener('wheel', handleWheel);
    };
  }, [camera, gl, onCameraReady]);

  useFrame(() => {
    camera.updateProjectionMatrix();
  });

  return null;
};

const TensorMesh = React.memo(({ value, dims, varName, highlightedIndices, setHoveredInfo, position, sliceMode = false, sliceIndex = 0 }) => {
  let rows = 1;
  let cols = 1;
  let depths = 1;
  let boxes = [];
  const varColor = getVariableColor(varName);

  // Determine dimensions based on the tensor shape
  if (value && Array.isArray(value)) {
    const validDims = dims.filter((dim) => dim > 0);
    if (validDims.length === 1) {
      cols = validDims[0];
    } else if (validDims.length === 2) {
      [rows, cols] = validDims;
    } else if (validDims.length === 3) {
      [rows, cols, depths] = validDims;
    }

    // Flatten the tensor data for easier indexing
    const tensorData = value.flat(Infinity).filter(val => val != null);
    const minVal = Math.min(...tensorData);
    const maxVal = Math.max(...tensorData);

    // Generate 3D boxes
    for (let i = 0; i < rows; i++) {
      for (let j = 0; j < cols; j++) {
        for (let k = 0; k < depths; k++) {
          const idx = i * cols * depths + j * depths + k;
          const val = tensorData[idx] ?? 0;

          // Compute intensity for coloring
          const intensity = maxVal === minVal ? 0.5 : (val - minVal) / (maxVal - minVal || 1);

          boxes.push(
            <mesh
              key={`${varName}-${i}-${j}-${k}`}
              position={[
                j - cols / 2,
                -i + rows / 2,
                k - depths / 2,
              ]}
              onPointerOver={(e) => {
                e.stopPropagation();
                // Change outline (edges) color to yellow
                try {
                  e.object.parent.traverse((child) => {
                    if (child.isLineSegments) {
                      child.material.color.set('yellow');
                    }
                  });
                } catch (error) {
                  console.error("Failed to highlight cube edges on hover:", error);
                }

                // Update hovered information
                startTransition(() => {
                  setHoveredInfo({
                    varName,
                    indices: [i, j, k],
                    value: tensorData[idx] ?? 'N/A',
                  });
                });
              }}
              onPointerOut={(e) => {
                e.stopPropagation();
                // Revert outline (edges) color to black
                try {
                  e.object.parent.traverse((child) => {
                    if (child.isLineSegments) {
                      child.material.color.set('black');
                    }
                  });
                } catch (error) {
                  console.error("Failed to reset cube edges on pointer out:", error);
                }

                // Clear hovered information
                startTransition(() => {
                  setHoveredInfo(null);
                });
              }}
            >
              {/* Cube geometry */}
              <boxGeometry args={[0.9, 0.9, 0.9]} />

              {/* Cube material based on intensity */}
              <meshStandardMaterial color={getColorForValue(varColor, intensity)} />

              {/* Cube outline (edges) */}
              <lineSegments>
                <edgesGeometry attach="geometry" args={[new THREE.BoxGeometry(0.9, 0.9, 0.9)]} />
                <lineBasicMaterial attach="material" color="black" />
              </lineSegments>
            </mesh>
          );
        }
      }
    }
  }

  return (
    <group position={position}>
      {/* Tensor label */}
      <Text
        position={[0, rows / 2 + 2, 0]}
        fontSize={1}
        color={`rgb(${varColor.r}, ${varColor.g}, ${varColor.b})`}
        anchorX="center"
        anchorY="middle"
      >
        {varName} {sliceMode ? `(Slice ${sliceIndex + 1}/${depths})` : ''}
      </Text>
      {/* Render all generated boxes */}
      {boxes}
    </group>
  );
});

// Update TensorsVisualization to pass slice information
const TensorsVisualization = React.memo(({ 
  tensorVariables, 
  setHoveredInfo, 
  onCameraControlsReady,
  sliceMode,
  sliceIndices
}) => {
  const spacing = 50;
  const numTensors = tensorVariables.length;
  const totalWidth = (numTensors - 1) * spacing;

  return (
    <Canvas
      style={{ height: '100%', width: '100%' }}
      camera={{ position: [0, 0, 100], fov: 45 }}
    >
      <ambientLight />
      <pointLight position={[10, 10, 10]} />
      <CustomCameraControls onCameraReady={onCameraControlsReady} />
      <group position={[-totalWidth / 2, 0, 0]}>
        {tensorVariables.map(([key, variable], index) => {
          console.log('foo');
          const { value, dims, highlighted_indices } = variable;
          const validDims = dims.filter((dim) => dim > 0);
          const tensorPosition = [index * spacing, 0, 0];
          
          return (
            <TensorMesh
              key={key}
              value={value}
              dims={validDims}
              varName={key}
              highlightedIndices={highlighted_indices}
              setHoveredInfo={setHoveredInfo}
              position={tensorPosition}
              sliceMode={sliceMode[key]}
              sliceIndex={sliceIndices[key] || 0}
            />
          );
        })}
      </group>
    </Canvas>
  );
});

// Helper function to get color based on intensity
const getColorForValue = (baseColor, intensity) => {
  const r = Math.round(255 - (255 - baseColor.r) * intensity);
  const g = Math.round(255 - (255 - baseColor.g) * intensity);
  const b = Math.round(255 - (255 - baseColor.b) * intensity);
  return `rgb(${r}, ${g}, ${b})`;
};


CustomCameraControls.propTypes = {
  onCameraReady: PropTypes.func,
};

TensorsVisualization.propTypes = {
  tensorVariables: PropTypes.arrayOf(PropTypes.array).isRequired,
  setHoveredInfo: PropTypes.func.isRequired,
  onCameraControlsReady: PropTypes.func,
};

export { fetchAndLogBlockData, TensorsVisualization };

File: GridBlock.jsx
// GridBlock.jsx
import React from 'react';
import { Box, Typography } from '@mui/material';

const GridBlock = ({ data, onClick }) => {
  return (
    <Box
      onClick={() => onClick(data)} // Call onClick with block data
      sx={{
        p: 1,
        cursor: 'pointer',
        '&:hover': { bgcolor: 'action.hover' },
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        border: 1,
        borderColor: 'grey.700',
        borderRadius: 1,
        bgcolor: 'grey.800',
      }}
    >
      <Typography variant="caption">{`${data.x},${data.y},${data.z}`}</Typography>
      <Typography variant="body2">Operations: {data.operations.length}</Typography>
    </Box>
  );
};

export default GridBlock;


File: BlockView.jsx
import React, { useEffect, useState, startTransition, Suspense } from 'react';
import { Box, Typography, Button, CircularProgress, ButtonGroup } from '@mui/material';
import PropTypes from 'prop-types';
import { fetchAndLogBlockData, TensorsVisualization } from './visualization-components';

const BlockView = ({
  currBlock,
  setCurrBlock,
  currLine,
  codeLines,
  setProcessedData,
  processedData,
}) => {
  // State management
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [variables, setVariables] = useState({});
  const [hoveredInfo, setHoveredInfo] = useState(null);
  const [cameraControls, setCameraControls] = useState(null);
  const [sliceMode, setSliceMode] = useState({});
  const [sliceIndices, setSliceIndices] = useState({});

  // Tensor slice controls
  const toggleSliceMode = (varName, dims) => {
    if (dims.length === 3) {
      setSliceMode(prev => ({
        ...prev,
        [varName]: !prev[varName]
      }));
      // Initialize slice index if not already set
      setSliceIndices(prev => ({
        ...prev,
        [varName]: prev[varName] ?? 0
      }));
    }
  };

  const updateSliceIndex = (varName, increment) => {
    setSliceIndices(prev => {
      const currentIndex = prev[varName] ?? 0;
      const maxIndex = variables[varName]?.dims[2] - 1 ?? 0;
      return {
        ...prev,
        [varName]: increment 
          ? Math.min(currentIndex + 1, maxIndex)
          : Math.max(currentIndex - 1, 0)
      };
    });
  };

  // Line number finder
  const findLineNumber = (sourceLine) => {
    return codeLines.findIndex(line => line.trim() === sourceLine.trim()) + 1;
  };

  const extractDims = (shapeArray) => {
    if (!Array.isArray(shapeArray)) return [-1, -1, -1];
    const len = shapeArray.length;
    if (len === 1) return [shapeArray[0], -1, -1];
    if (len === 2) return [shapeArray[0], shapeArray[1], -1];
    if (len >= 3) return shapeArray.slice(0, 3);
    return [-1, -1, -1];
  };
  
  const processVariable = (value) => {
    // If it's a scalar or non-object
    if (!value || typeof value !== 'object') {
      return {
        value: value,
        dims: [-1, -1, -1],
        highlighted_indices: [],
        tensor_ptr: null,
        solo_ptr: false,
        slice_shape: null
      };
    }
  
    // Pointer-based tensor variable
    if ('tensor_ptr' in value) {
      const usedDims = value.shape 
        ? extractDims(value.shape) 
        : (value.dim ? extractDims(value.dim) : [-1, -1, -1]);
  
      return {
        value: null,
        dims: usedDims,
        highlighted_indices: value.highlighted_indices || [],
        tensor_ptr: value.tensor_ptr || null,
        solo_ptr: !!value.solo_ptr,
        slice_shape: value.slice_shape || null
      };
    }
  
    // Standard tensor with data
    if ('data' in value) {
      const usedDims = value.shape ? extractDims(value.shape) : (value.dims || [-1, -1, -1]);
      return {
        value: value.data,
        dims: usedDims,
        highlighted_indices: value.highlighted_indices || [],
        tensor_ptr: null,
        solo_ptr: false,
        slice_shape: null
      };
    }
  
    // Default case: scalar or unknown object
    return {
      value: value,
      dims: [-1, -1, -1],
      highlighted_indices: [],
      tensor_ptr: null,
      solo_ptr: false,
      slice_shape: null
    };
  };
  

  const updateVariables = (data) => {
    if (!data?.results) return;

    const newVariables = {};
    data.results.forEach(result => {
      try {
        const resultLine = findLineNumber(result.source_line);
        if (resultLine <= currLine && result.changed_vars) {
          Object.entries(result.changed_vars).forEach(([key, value]) => {
            console.log(value);
            newVariables[key] = processVariable(value);
          });
        }
      } catch (error) {
        console.error('Error processing result:', error, result);
      }
    });
    setVariables(newVariables);
  };

  // Data fetching
  useEffect(() => {
    if (!currBlock) {
      startTransition(() => {
        setVariables({});
        setProcessedData(null);
      });
      return;
    }

    let isMounted = true;

    const fetchData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const data = await fetchAndLogBlockData(
          currBlock.x,
          currBlock.y,
          currBlock.z
        );
        if (isMounted) {
          startTransition(() => {
            setProcessedData(data);
            updateVariables(data);
          });
        }
      } catch (err) {
        if (isMounted) setError('Failed to fetch block data.');
      } finally {
        if (isMounted) setIsLoading(false);
      }
    };

    fetchData();
    return () => { isMounted = false; };
  }, [currBlock, setProcessedData]);

  // Update variables when line changes
  useEffect(() => {
    if (processedData) {
      startTransition(() => updateVariables(processedData));
    }
  }, [currLine, processedData]);

  // Camera controls
  const handleFocusTensor = (index) => {
    if (!cameraControls) return;
    const spacing = 50;
    const numTensors = tensorVariables.length;
    const totalWidth = (numTensors - 1) * spacing;
    const position = [-totalWidth / 2 + index * spacing, -9, -50];
    cameraControls.focusOnPosition(position);
  };

  // Filter variables
  const filterTensorVariables = (vars) => {

    return Object.entries(vars).filter(([, variable]) => {
      const validDims = variable.dims.filter(dim => dim > 0);
      return validDims.length >= 1 && validDims.length <= 3;
    });
  };

  const filterNonTensorVariables = (vars) => {
    return Object.entries(vars).filter(([, variable]) => {
      const validDims = variable.dims.filter(dim => dim > 0);
      console.log(validDims);
      return validDims.length === 0 || validDims.length > 3;
    });
  };

  const tensorVariables = filterTensorVariables(variables);
  const nonTensorVariables = filterNonTensorVariables(variables);

  // Render tensor controls
  const renderTensorControls = (key, variable, index) => {
    const is3DTensor = variable.dims.length === 3;
    const isSliceModeActive = sliceMode[key];
    const currentSliceIndex = sliceIndices[key] ?? 0;
    const maxSliceIndex = variable.dims[2] - 1;

    return (
      <Box key={key} sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', my: 1 }}>
        <Button
          variant="outlined"
          size="small"
          onClick={() => handleFocusTensor(index)}
        >
          Focus {key}
        </Button>
        
        {is3DTensor && (
          <>
            <Button
              variant="outlined"
              size="small"
              onClick={() => toggleSliceMode(key, variable.dims)}
            >
              {isSliceModeActive ? '3D View' : 'Slice View'}
            </Button>
            
            {isSliceModeActive && (
              <ButtonGroup size="small" variant="outlined">
                <Button
                  onClick={() => updateSliceIndex(key, false)}
                  disabled={currentSliceIndex === 0}
                >
                  Previous
                </Button>
                <Button disabled>
                  {currentSliceIndex + 1}/{maxSliceIndex + 1}
                </Button>
                <Button
                  onClick={() => updateSliceIndex(key, true)}
                  disabled={currentSliceIndex === maxSliceIndex}
                >
                  Next
                </Button>
              </ButtonGroup>
            )}
          </>
        )}
      </Box>
    );
  };

  return (
    <Box>
      <Button 
        onClick={() => setCurrBlock(null)} 
        variant="contained" 
        sx={{ mb: 2 }}
      >
        Back
      </Button>

      <Typography variant="h6">
        Block View for Block {currBlock ? `${currBlock.x},${currBlock.y},${currBlock.z}` : ''}
      </Typography>

      <Box sx={{ mt: 2, mb: 2, p: 2, border: '1px solid #ccc', borderRadius: 2 }}>
        <Typography variant="h6">Variables (Line {currLine}):</Typography>

        {isLoading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>
            <CircularProgress />
          </Box>
        ) : (
          <>
            {/* Non-tensor variables */}
            {nonTensorVariables.length > 0 && (
              <Box sx={{ mb: 2 }}>
                {nonTensorVariables.map(([key, variable]) => (
                  <Typography key={key} variant="body2">
                    {key}: {JSON.stringify(variable.value)}
                  </Typography>
                ))}
              </Box>
            )}

            {/* Tensor controls */}
            {tensorVariables.length > 0 && (
              <Box sx={{ mb: 2 }}>
                <Button
                  variant="outlined"
                  size="small"
                  onClick={() => cameraControls?.resetView()}
                  sx={{ mb: 2 }}
                >
                  Reset View
                </Button>
                
                {tensorVariables.map(([key, variable], index) => 
                  renderTensorControls(key, variable, index)
                )}
              </Box>
            )}

            {/* Tensor visualization */}
            {tensorVariables.length > 0 ? (
              <Suspense fallback={<CircularProgress />}>
                <Box sx={{ height: '700px', width: '100%', mb: 2, position: 'relative' }}>
                  <TensorsVisualization 
                    tensorVariables={tensorVariables}
                    setHoveredInfo={setHoveredInfo}
                    onCameraControlsReady={setCameraControls}
                    sliceMode={sliceMode}
                    sliceIndices={sliceIndices}
                  />
                  
                  {/* Hover info overlay */}
                  {hoveredInfo && (
                    <Box
                      sx={{
                        position: 'absolute',
                        top: '10px',
                        right: '10px',
                        padding: '10px',
                        backgroundColor: 'rgba(0,0,0,0.9)',
                        color: 'white',
                        borderRadius: '8px',
                        boxShadow: '0 0 10px rgba(0,0,0,0.3)',
                        zIndex: 1000,
                      }}
                    >
                      <Typography variant="body2">
                        <strong>{hoveredInfo.varName}</strong> [{hoveredInfo.indices.join(',')}]: {hoveredInfo.value}
                      </Typography>
                    </Box>
                  )}
                </Box>
              </Suspense>
            ) : (
              <Typography variant="body2">
                No tensor variables to display.
              </Typography>
            )}

            {tensorVariables.length === 0 && nonTensorVariables.length === 0 && (
              <Typography variant="body2">No variables defined yet.</Typography>
            )}
          </>
        )}
      </Box>

      {error && (
        <Typography variant="body2" color="error" sx={{ mt: 2 }}>
          {error}
        </Typography>
      )}
    </Box>
  );
};

BlockView.propTypes = {
  currBlock: PropTypes.object,
  setCurrBlock: PropTypes.func.isRequired,
  currLine: PropTypes.number,
  codeLines: PropTypes.array.isRequired,
  setProcessedData: PropTypes.func.isRequired,
  processedData: PropTypes.object,
};

export default BlockView;

File: GridViewComponent.jsx
// GridViewComponent.jsx
import React, { useState, useEffect } from 'react';
import { Box, Slider, Typography, Grid, Button, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';
import GridBlock from './GridBlock';

// Helper function to fetch data for visualization
const fetchVisualizationData = async () => {
  try {
    const response = await fetch('http://73.106.153.51:5002/api/data');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching visualization data:', error);
    return null;
  }
};

// GridViewComponent now handles only grid display and block selection
const GridViewComponent = ({ setCurrBlock }) => {
  const [globalData, setGlobalData] = useState(null);  // Store global data
  const [maxValues, setMaxValues] = useState([0, 0, 0]);  // Max X, Y, Z for the grid
  const [sliderValues, setSliderValues] = useState([-1, -1, -1]);  // Slider values for X, Y, Z axes
  const [isInfoPopupOpen, setIsInfoPopupOpen] = useState(false);  // Info dialog visibility

  useEffect(() => {
    // Fetch visualization data on component mount
    const fetchData = async () => {
      const data = await fetchVisualizationData();
      if (data && data.ops && data.ops.visualization_data) {
        setGlobalData(data);
        determineMaxValues(data.ops.visualization_data);
      }
    };
    fetchData();
  }, []);

  // Determine the maximum X, Y, Z values from the visualization data
  const determineMaxValues = (visualizationData) => {
    const keys = Object.keys(visualizationData);
    if (keys.length === 0) {
      setMaxValues([0, 0, 0]);
      return;
    }

    const maxVals = keys.reduce(
      (max, key) => {
        const [x, y, z] = key.split('_').map(Number);
        return [
          Math.max(max[0], x),
          Math.max(max[1], y),
          Math.max(max[2], z),
        ];
      },
      [0, 0, 0]
    );
    setMaxValues(maxVals);
  };

  // Update slider values for each axis
  const handleSliderChange = (index, newValue) => {
    const newSliderValues = [...sliderValues];
    newSliderValues[index] = newValue;
    setSliderValues(newSliderValues);
  };

  // Handle block click to set the selected block
  const handleBlockClick = (blockData) => {
    setCurrBlock(blockData);
  };

  // Render the grid based on slider and max values
  const renderGrid = () => {
    if (!globalData || !globalData.ops || !globalData.ops.visualization_data) return null;

    const [xMax, yMax, zMax] = maxValues;
    const [xSlider, ySlider, zSlider] = sliderValues;

    // Determine the range for each axis: if slider is -1, iterate over all values, otherwise use the slider value
    const xValues = xSlider === -1 ? Array.from({ length: xMax + 1 }, (_, i) => i) : [xSlider];
    const yValues = ySlider === -1 ? Array.from({ length: yMax + 1 }, (_, i) => i) : [ySlider];
    const zValues = zSlider === -1 ? Array.from({ length: zMax + 1 }, (_, i) => i) : [zSlider];

    return (
      <Grid container spacing={1}>
        {zValues.map((z) => (
          yValues.map((y) => (
            <Grid container item xs={12} spacing={1} key={`row-${y}-${z}`}>
              {xValues.map((x) => {
                const key = `${x}_${y}_${z}`;
                const blockData = globalData.ops.visualization_data[key];

                return (
                  <Grid item key={key}>
                    {blockData ? (
                      <GridBlock
                        data={{
                          x,
                          y,
                          z,
                          operations: blockData,
                        }}
                        onClick={handleBlockClick}
                      />
                    ) : (
                      <Box
                        sx={{
                          width: 50,
                          height: 50,
                          bgcolor: 'grey.800',
                          border: 1,
                          borderColor: 'grey.700',
                        }}
                      />
                    )}
                  </Grid>
                );
              })}
            </Grid>
          ))
        ))}
      </Grid>
    );
  };

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
      {/* Grid Display Area */}
      <Box sx={{ flexGrow: 1, overflow: 'auto', mb: 2 }}>
        {renderGrid()}
      </Box>

      {/* Sliders for X, Y, Z axis */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>
        {['X', 'Y', 'Z'].map((axis, index) => (
          <Box key={axis} sx={{ width: '30%' }}>
            <Typography>{axis} Axis</Typography>
            <Slider
              value={sliderValues[index]}
              onChange={(_, newValue) => handleSliderChange(index, newValue)}
              min={-1}
              max={maxValues[index]}
              step={1}
              marks
              valueLabelDisplay="auto"
            />
            <Typography variant="caption" sx={{ color: 'grey.500' }}>
              {sliderValues[index] === -1 ? 'All values' : `Value: ${sliderValues[index]}`}
            </Typography>
          </Box>
        ))}
      </Box>

      {/* Info Button */}
      <Button
        onClick={() => setIsInfoPopupOpen(true)}
        variant="outlined"
        sx={{ position: 'absolute', top: 10, right: 10 }}
      >
        Info
      </Button>

      {/* Info Dialog */}
      <Dialog open={isInfoPopupOpen} onClose={() => setIsInfoPopupOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>Kernel Source Code</DialogTitle>
        <DialogContent>
          <Typography component="pre" sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>
            {globalData?.kernel_src || 'No kernel source code available'}
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsInfoPopupOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default GridViewComponent;


File: CodeViewerComponent.jsx
// src/components/CodeViewerComponent.jsx
import React, { useEffect, useRef, useState, useMemo } from 'react';
import {
  Box,
  Typography,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import PropTypes from 'prop-types';
import isEqual from 'lodash/isEqual'; // Import lodash's isEqual for deep comparison

const CodeViewerComponent = ({
  currBlock,
  currLine,
  setCurrLine,
  codeLines,
  loadingCode,
  errorCode,
  processedData, // We now receive processedData
}) => {
  const codeContainerRef = useRef(null);
  const [currentHighlightIndex, setCurrentHighlightIndex] = useState(0); // Track current highlight index
  const [isInfoPopupOpen, setIsInfoPopupOpen] = useState(false);

  // Memoize linesToHighlight to prevent unnecessary recalculations
  const linesToHighlight = useMemo(() => {
    if (!processedData || !processedData.results || !codeLines) {
      return [];
    }

    const highlightSet = new Set();
    processedData.results.forEach((result) => {
      const lineNum = findLineNumber(codeLines, result.source_line);
      if (lineNum !== -1) {
        highlightSet.add(lineNum);
      }
    });

    // Convert Set to Array and maintain order based on results
    const highlightLines = processedData.results
      .map((result) => {
        const lineNum = findLineNumber(codeLines, result.source_line);
        return lineNum;
      })
      .filter((lineNum) => lineNum !== -1 && highlightSet.has(lineNum));

    return highlightLines;
  }, [processedData, codeLines]);

  // Initialize or reset currentHighlightIndex when linesToHighlight changes
  useEffect(() => {
    if (linesToHighlight.length > 0) {
      setCurrentHighlightIndex(0);
      setCurrLine(linesToHighlight[0]);
    } else if (codeLines.length > 0) {
      setCurrentHighlightIndex(0);
      setCurrLine(1); // Default to first line if no highlights
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [linesToHighlight]);

  // Scroll to the current line when currLine changes
  useEffect(() => {
    if (currLine && codeContainerRef.current) {
      const lineElement = document.getElementById(`code-line-${currLine}`);
      if (lineElement) {
        lineElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  }, [currLine]);

  // Handle keyboard navigation using up and down arrow keys
  useEffect(() => {
    const handleKeyDown = (event) => {

      if (event.key === '.') {
        event.preventDefault();
        handleNextLine();
      } else if (event.key === ',') {
        event.preventDefault();
        handlePrevLine();
      }
    };

    window.addEventListener('keydown', handleKeyDown);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentHighlightIndex, linesToHighlight]);

  const handlePrevLine = () => {
    if (currentHighlightIndex > 0) {
      const newIndex = currentHighlightIndex - 1;
      setCurrentHighlightIndex(newIndex);
      setCurrLine(linesToHighlight[newIndex]);
    }
  };

  const handleNextLine = () => {
    if (currentHighlightIndex < linesToHighlight.length - 1) {
      const newIndex = currentHighlightIndex + 1;
      setCurrentHighlightIndex(newIndex);
      setCurrLine(linesToHighlight[newIndex]);
    }
  };

  // Function to find the line number of a specific source line
  function findLineNumber(lines, sourceLine) {
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].trim() === sourceLine.trim()) {
        return i + 1; // Line numbers start at 1
      }
    }
    return -1; // Not found
  }

  // If there's an error fetching code, display it
  if (errorCode) {
    return (
      <Box
        sx={{
          width: '100%',
          height: '100%',
          bgcolor: 'red.800',
          p: 2,
          borderRadius: 1,
        }}
      >
        <Typography variant="h6" color="white">
          Error: {errorCode}
        </Typography>
      </Box>
    );
  }

  // If the code is still loading, display a loading message
  if (loadingCode) {
    return (
      <Box
        sx={{
          width: '100%',
          height: '100%',
          bgcolor: 'grey.800',
          p: 2,
          borderRadius: 1,
        }}
      >
        <Typography variant="h6" color="grey.500">
          Loading...
        </Typography>
      </Box>
    );
  }

  // If no block is selected, display a message
  if (!currBlock) {
    return (
      <Typography
        variant="h6"
        color="grey.500"
        align="center"
        sx={{ mt: 2 }}
      >
        Select a block to view code
      </Typography>
    );
  }

  return (
    <Box
      sx={{
        display: 'flex',
        flexDirection: 'column',
        height: '100%',
        position: 'relative',
      }}
    >
      {/* Header Section */}
      <Box
        sx={{
          flex: '0 0 15%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          mb: 2,
        }}
      >
        <Typography variant="h6" gutterBottom>
          Source Code Viewer
        </Typography>
      </Box>

      {/* Code Display Section */}
      <Box
        ref={codeContainerRef}
        sx={{
          flex: '1 1 85%',
          overflow: 'auto',
          bgcolor: '#1e1e1e',
          color: '#d4d4d4',
          p: 2,
          fontFamily: 'monospace',
          whiteSpace: 'pre-wrap',
          fontSize: '14px',
          lineHeight: '1.5',
        }}
      >
        {codeLines.map((line, index) => {
          const lineNumber = index + 1;
          const isCurrent = currLine === lineNumber;

          return (
            <div
              key={index}
              id={`code-line-${lineNumber}`}
              style={{
                backgroundColor: isCurrent
                  ? 'rgba(255, 255, 0, 0.7)' // Highlighted color
                  : 'transparent',
                padding: '0 5px',
                cursor: 'default',
              }}
            >
              <span style={{ color: '#888', userSelect: 'none' }}>
                {lineNumber.toString().padStart(3, ' ')}:
              </span>{' '}
              {line}
            </div>
          );
        })}
      </Box>

      {/* Navigation Buttons */}
      {linesToHighlight.length > 1 && (
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'center',
            mt: 2,
            gap: 2,
          }}
        >
          <Button
            onClick={handlePrevLine}
            disabled={currentHighlightIndex === 0}
            variant="contained"
          >
            Previous
          </Button>
          <Button
            onClick={handleNextLine}
            disabled={currentHighlightIndex === linesToHighlight.length - 1}
            variant="contained"
          >
            Next
          </Button>
        </Box>
      )}

      {/* Info Button */}
      <Button
        onClick={() => setIsInfoPopupOpen(true)}
        variant="outlined"
        sx={{ position: 'absolute', bottom: 10, right: 10 }}
      >
        Info
      </Button>

      {/* Info Dialog */}
      <Dialog
        open={isInfoPopupOpen}
        onClose={() => setIsInfoPopupOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>Kernel Source Code</DialogTitle>
        <DialogContent>
          <Typography
            component="pre"
            sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}
          >
            {codeLines.join('\n') || 'No kernel source code available'}
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsInfoPopupOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

CodeViewerComponent.propTypes = {
  currBlock: PropTypes.object,
  currLine: PropTypes.number,
  setCurrLine: PropTypes.func.isRequired,
  codeLines: PropTypes.array.isRequired,
  loadingCode: PropTypes.bool.isRequired,
  errorCode: PropTypes.string,
  processedData: PropTypes.object,
};

export default CodeViewerComponent;


